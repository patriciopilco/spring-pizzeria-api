openapi: 3.0.1
info:
  title: API PIZZA
  description: API QUE NOS PERMITE VENDER PIZZAS
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/pizzas:
    get:
      tags:
        - pizza-controller
      operationId: getAll
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: elements
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 8
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePizzaEntity'
    put:
      tags:
        - pizza-controller
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PizzaEntity'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PizzaEntity'
    post:
      tags:
        - pizza-controller
      operationId: add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PizzaEntity'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PizzaEntity'
  /api/pizzas/price:
    put:
      tags:
        - pizza-controller
      operationId: updatePrice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePizzaPriceDto'
        required: true
      responses:
        '200':
          description: OK
  /api/orders/random:
    post:
      tags:
        - order-controller
      operationId: randomOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RandomOrderDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/pizzas/{idPizza}:
    get:
      tags:
        - pizza-controller
      operationId: get
      parameters:
        - name: idPizza
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PizzaEntity'
    delete:
      tags:
        - pizza-controller
      operationId: delete
      parameters:
        - name: idPizza
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/pizzas/without/{ingredient}:
    get:
      tags:
        - pizza-controller
      operationId: getWithout
      parameters:
        - name: ingredient
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PizzaEntity'
  /api/pizzas/with/{ingredient}:
    get:
      tags:
        - pizza-controller
      operationId: getWith
      parameters:
        - name: ingredient
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PizzaEntity'
  /api/pizzas/name/{name}:
    get:
      tags:
        - pizza-controller
      operationId: getByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PizzaEntity'
  /api/pizzas/cheapest/{price}:
    get:
      tags:
        - pizza-controller
      operationId: getCheapestPizzas
      parameters:
        - name: price
          in: path
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PizzaEntity'
  /api/pizzas/available:
    get:
      tags:
        - pizza-controller
      operationId: getAvailable
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: elements
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 8
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: name
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
            default: ASC
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePizzaEntity'
  /api/orders:
    get:
      tags:
        - order-controller
      operationId: getAll_1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderEntity'
  /api/orders/today:
    get:
      tags:
        - order-controller
      operationId: getTodayOrders
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderEntity'
  /api/orders/summary/{orderId}:
    get:
      tags:
        - order-controller
      operationId: getSummary
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderSummary'
  /api/orders/outside:
    get:
      tags:
        - order-controller
      operationId: getOutsideOrders
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderEntity'
  /api/orders/customer/{idCustomer}:
    get:
      tags:
        - order-controller
      operationId: getCustomerOrders
      parameters:
        - name: idCustomer
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderEntity'
  /api/customers/phone/{phone}:
    get:
      tags:
        - custormer-controller
      operationId: getByPhone
      parameters:
        - name: phone
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerEntity'
components:
  schemas:
    PizzaEntity:
      type: object
      properties:
        idPizza:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        vegetarian:
          type: boolean
        vegan:
          type: boolean
        available:
          type: boolean
    UpdatePizzaPriceDto:
      type: object
      properties:
        pizzaId:
          type: integer
          format: int32
        newPrice:
          type: number
          format: double
    RandomOrderDto:
      type: object
      properties:
        idCustomer:
          type: string
        method:
          type: string
    PagePizzaEntity:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PizzaEntity'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        unpaged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    OrderEntity:
      type: object
      properties:
        idOrder:
          type: integer
          format: int32
        idCustomer:
          type: string
        date:
          type: string
          format: date-time
        total:
          type: number
          format: double
        method:
          type: string
        addionalNotes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemEntity'
    OrderItemEntity:
      type: object
      properties:
        idOrder:
          type: integer
          format: int32
        idItem:
          type: integer
          format: int32
        idPizza:
          type: integer
          format: int32
        quantity:
          type: number
          format: double
        price:
          type: number
          format: double
        pizza:
          $ref: '#/components/schemas/PizzaEntity'
    OrderSummary:
      type: object
      properties:
        idOrder:
          type: integer
          format: int32
        customerName:
          type: string
        orderDate:
          type: string
          format: date-time
        orderTotal:
          type: number
          format: double
        pizzaNames:
          type: string
    CustomerEntity:
      type: object
      properties:
        idCustomer:
          type: string
        name:
          type: string
        address:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
